% \iffalse meta-comment
% !TEX program  = pdfLaTeX
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
tikzscale --- Absolute resizing of TikZ pictures and PGF plots without
              scaling text
E-mail: pat_h@web.de Released under the LaTeX Project
Public License v1.3c or later See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

This is the tikzscale package, providing an interface similar to
includegraphics for tikzpictures. It allows scaling of tikz images and
pgfplots to a provided width or height without changing the text size.

Usage: \usepackage{tikzscale}
    or \usepackage[loadFromCurrentDirectory]{tikzscale}

The package adds support for TikZ files using the \includegraphics command.
As an example write
\includegraphics{myTikZFile.tikz}
instead of
\includegraphics{myJPEGFile.jpeg},
with myTikZFile.tikz being the file name of a text file containing
everything from \begin{tikzpicture} to \end{tikzpicture}. To actually
do some scaling of the included TikZ file, give either an absolute width
or an absolute height in the optional argument, e.g.
\tikzscale@includetikz[width=0.5\linewidth]{myTikZFile.tikz}.
If the file contains a plot created with the pgfplots package, set both
width and height via the optional argument, e.g.
\tikzscale@includetikz[width=\linewidth,height=0.4\linewidth]{myPGFPlot.tikz}.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
tikzscale --- Absolute resizing of TikZ pictures and PGF plots without scaling text
E-mail: pat_h@web.de
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2012 by Patrick Häcker <pat_h@web.de>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Patrick Häcker.

This work consists of the file  tikzscale.dtx
and the derived files           tikzscale.ins,
                                tikzscale.pdf and
                                tikzscale.sty.

\endpostamble
\usedir{tex/latex/tikzscale}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/tikzscale}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/tikzscale}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{tikzscale}[2012/09/10 v0.1 tikzscale LaTeX package]
\RequirePackage{graphicx}
\RequirePackage{etoolbox}
\RequirePackage{xparse}
\RequirePackage{letltxmacro}
\RequirePackage{xstring}
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[utf8]{inputenx}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{amsmath}
\usepackage[numbered]{hypdoc}
\hypersetup{pdftitle=The tikzscale package}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%\GetFileInfo{\jobname.sty}
%
%\title{^^A
%  \textsf{tikzscale} --- Absolute resizing of TikZ pictures and PGF plots without scaling text\thanks{^^A
%    This file describes version \fileversion, last revised \filedate.^^A
%  }^^A
%}
%\author{^^A
%  Patrick Häcker\thanks{E-mail: pat\_h@web.de}^^A
%}
%\date{Released \filedate}
%
%\maketitle
%
%\changes{v0.1}{2012/09/10}{First public release}
%
% \section{Introduction}
% Relatives skalieren in Tikz vorhanden und absolutes Skalieren, wenn Text mitskaliert wird -> Neuerung: Absolut ohne Textskalierung
% pgfplots erlaubt absolut, allerdings nur Näherungsalgorithmus -> Neuerung: Verbesserte Näherung, idealerweise quasi exakt
%
% Drei Features: Pfadsuche aktuelles Verzeichnis (benötigt currfile), tikz laden über vereinheitlichtes Interface includegraphics und verbesserte Skalierung benötigt tikz oder pgfplots

%     \href{darauf verweisen}{http://tex.stackexchange.com/q/71583/7323}

% \section{Usage and Examples}
%
% \section{Compatibility}
% \subsection{Load Order}
%
% \subsection{currfile}
%
% \subsection{Externalization library}
%
% \section{Further Ideas}
% \begin{itemize}
%	\item Idea
% \end{itemize}
%
% \section{Contributions}
% \begin{itemize}
%     \item Any Name
%         \begin{itemize}
%             \item did something
%         \end{itemize}
% \end{itemize}
%
%
% \section{Implementation}
% The basic idea is to first get the correct file name (i.e. find the path and the file extension), then determine the graphic type (i.e. TikZ or something else) and call either the original includegraphics command or the tikzscale command.
%
% \iffalse
%<*package>
% \fi
%
%\begin{macro}{\tikzexternal}
%    \begin{macrocode}
\AtEndPreamble{%
%    \end{macrocode}
	% Provide dummy commands, if the externalization library has not been loaded during the preamble.
%    \begin{macrocode}
	\ProvideDocumentCommand{\tikzsetnextfilename}{m}{}%
	\ProvideDocumentCommand{\tikzsetexternalprefix}{m}{}%
	\ProvideDocumentCommand{\tikzexternaldisable}{}{}%
	\ProvideDocumentCommand{\tikzexternalenable}{}{}%
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\tikzscale@scale}
	% Set these as default values to allow a preview of tikzpicture environments in ktikz or the like. Global definitions are necessary, as local definitions result in errors in some situations.
	%
	% Use a scale factor for all tikzpicture environments. Set the factor to 1 as default, so if there are no additional scaling demands, just keep the tikzpicture unscaled. The internal redefinition of the style is correct, because if one tikzpicture includes another one, the scaling factor is reset so that it does not get squared in the inner one: http://tex.stackexchange.com/questions/38605/scaling-a-tikz-figure-from-an-external-file
%    \begin{macrocode}
	\@ifpackageloaded{tikz}{%
		\gdef\tikzscale@scale{1}%
		\tikzset{every picture/.style={scale=\tikzscale@scale,every picture/.style={}}}%
	}{}%
	%
	\@ifpackageloaded{pgfplots}{%
		\gdef\tikzscale@width{\linewidth}%
		\gdef\tikzscale@height{\linewidth}%
		\pgfplotsset{every axis/.style={width=\tikzscale@width,height=\tikzscale@height,every axis/.style={}}}%
	}{}%
}
%    \end{macrocode}
%\end{macro}
%
% This command draws the plot's border at the right text border, so that thick points or label descriptions can reach into the margin. This should be limited to pgfplots only if activated.
%^^A \tikzset{every picture/.style={trim axis right}}
%
% With the option below, the labels can be moved a bit to the left so that they reach to the text margin.
% yticklabel style={align=right,inner sep=0pt,xshift=-0.1cm}
%
%\begin{macro}{\pgfmathsetglobalmacro}
% This is a general command, which might be useful for inclusion into the tikz package. It works similar to \cmd{\pgfmathsetglobalmacro} but has global scope.
%    \begin{macrocode}
\def\pgfmathsetglobalmacro#1#2{%
	\pgfmathparse{#2}%
	\global\let#1\pgfmathresult%
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\edocsvlist}
% This is a general command, which might be useful for inclusion into the etoolbox package. It works similar to \cmd{\docsvlist} but expands its argument similar to \cmd{\def} vs.\ \cmd{\edef}, which is useful if the list is stored in a macro/variable.
%    \begin{macrocode}
% \def\edocsvlist#1{%
\NewDocumentCommand{\edocsvlist}{m}{%
	\edef\tikzscale@edocsvlist{#1}%
	\expandafter\docsvlist\expandafter{\tikzscale@edocsvlist}%
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\eforcsvlist}
% These is a general command, which might be useful for inclusion into the etoolbox package. It works similar to \cmd{\forcsvlist} but expands its argument similar to \cmd{\def} vs.\ \cmd{\edef}, which is useful if the list is stored in a macro/variable.
%    \begin{macrocode}
% \def\eforcsvlist#1#2{%
\NewDocumentCommand{\eforcsvlist}{mm}{%
	\edef\tikzscale@eforcsvlist{#2}%
	\expandafter\forcsvlist\expandafter{\expandafter#1\expandafter}\expandafter{\tikzscale@eforcsvlist}%
}
%    \end{macrocode}
%\end{macro}

%
%\begin{macro}{\includegraphics}
%    \begin{macrocode}
\AtEndPreamble{%
%    \end{macrocode}
	% Add the TikZ file extensions to the \href{graphicx file extensions}{http://tex.stackexchange.com/a/45502}.
%    \begin{macrocode}
	\def\tikzscale@tikzFileExtensions{.tikz,.TIKZ,.TikZ,.pgf,.PGF}%
% 	\def\tikzscale@tikzFileExtensions{.tikz,.TIKZ,.TikZ,.pgf,.PGF,.tex,.TEX}%
	\DeclareGraphicsExtensions{\tikzscale@tikzFileExtensions,\Gin@extensions}%
%    \end{macrocode}
	% The \cmd{graphicspath} command is used to set additional directories, which are searched for graphics. \cmd{\Ginput@path} is used to get the \href{current content}{http://tex.stackexchange.com/a/58404}.
%    \begin{macrocode}
	\ifdef{\currfiledir}{%
% 		\graphicspath{{\currfiledir}{}\Ginput@path}%
		\def\tikzscale@graphicspath{\currfiledir,{}}%
	}{}%
%    \end{macrocode}
%     \item Save the \cmd{\includegraphics} (\href{command}{ftp://ftp.tu-chemnitz.de/pub/tex/macros/latex/required/graphics/grfguide.pdf}), to have a consistent user interface.
%    \begin{macrocode}
	\LetLtxMacro{\tikzscale@oldincludegraphics}{\includegraphics}%
	\RenewDocumentCommand{\includegraphics}{om}{%
%    \end{macrocode}
		% Find the exact file name, as the ending and the path could be omitted.
%    \begin{macrocode}
		\tikzscale@findExactFileName{tikzscale@fileName}{#2}%
%    \end{macrocode}
		% Check if the found file is a TikZ file.
	%    \begin{macrocode}
		\tikzscale@isTikzFile{tikzscale@testTikzFile}{\tikzscale@fileName}
		\ifcsdef{tikzscale@testTikzFile}{
			\def\function{\tikzscale@includetikz}%
		}{%
			\def\function{\tikzscale@oldincludegraphics}%
		}%
		\IfNoValueTF{#1}{%
			\function{\tikzscale@fileName}%
		}{%
			\function[#1]{\tikzscale@fileName}%
		}%
	}%
}
%    \end{macrocode}
%\end{macro}
%
% \begin{macro}{\tikzscale@findExactFileName}
% Find the exact file name of a graphic file by testing several paths and file endings if there are degrees of freedom. The file name is saved in the command sequence name given by the first argument.
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@findExactFileName}{mm}{%
	%    \end{macrocode}
	% Delete the return variable if it already exists to allow checking if a file has been found.
	%    \begin{macrocode}
	\csundef{#1}
	%    \end{macrocode}
	% Create a helper function used inside the file ending evaluation.
	%    \begin{macrocode}
	\def\tikzscale@checkDirectory##1{%
		\def\tikzscale@checkExtension####1{%
			\IfFileExists{##1#2####1}{%
				\csdef{#1}{##1#2####1}\listbreak%
			}{}%
		}%
%    \end{macrocode}
	% Test all possible file extensions and do not forget that the extension might already be given. \cmd{\Gin@extensions} returns the \href{current content}{http://tex.stackexchange.com/a/45502} set by \cmd{\DeclareGraphicsExtensions}.
%    \begin{macrocode}
		\eforcsvlist{\tikzscale@checkExtension}{{},\Gin@extensions}%
	}%
	\eforcsvlist{\tikzscale@checkDirectory}{\tikzscale@graphicspath}%
%    \end{macrocode}
	% If no file has been found, return the given file name, as includegraphics should try its best.
%    \begin{macrocode}
	\ifcsundef{#1}{%
		\csdef{#1}{#2}%
	}{}%
}
%    \end{macrocode}
%\end{macro}
%
% \begin{macro}{\tikzscale@findExactFileName}
% The first argument is the macro name (without backslash), which gets defined if the file is a tikzfile.
% The second argument is the file name.
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@isTikzFile}{mm}{%
	%    \end{macrocode}
	% Create a helper function used inside the evaluation.
	%    \begin{macrocode}
	\def\do##1{%
		\IfEndWith{#2}{##1}{%
			\csdef{#1}{}\listbreak%
		}{}%
	}%
%    \end{macrocode}
	% Delete macro so that defining it is really indicating something.
%    \begin{macrocode}
	\csundef{#1}%
	\edocsvlist{\tikzscale@tikzFileExtensions}%
}
%    \end{macrocode}
%\end{macro}

%
%\begin{macro}{\tikzscale@includetikz}
% This command allows the inclusion of a tikz file like a graphics file. Thus instead of writing
% \cmd{\includegraphics}[width=\cmd{\linewidth}]{fileWithoutEnding}
% write
% \cmd{\tikzscale@includetikz}[width=\cmd{\linewidth}]{fileWithoutEnding}
% If only one of width or height are given, scale proportionally to fullfil the requirement. If both are given, scale non-proportionally to required width and height. Therefore, for normal tikzpictures only give either width or height, as the aspect ratio is already determined by the coordinate limits in the tikzpicture, but give width and height for pgfplots, as the aspect ratio is unknown for these plots. \cmd{\NewEnviron} could be used to handle something like verbose in a tikzpicture, but at the moment, this is unsupported.
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@includetikz}{>{\SplitList,}om}{%
%    \end{macrocode}
	% Start a group, so that changed variables during processing the current tikzpicture due not influence other tikzpictures. This is much more convienient, than resetting every single variable. Use \cmd{\begingroup} instead of \cmd{\bgroup} to simplify finding unmatched braces.
%    \begin{macrocode}
	\IfNoValueTF{#1}{%
		\input{#2}%
	}{%
		\begingroup
		\tikzscale@includeTikzSplitArguments{#2}#1%
		\endgroup
	}
}
%    \end{macrocode}
%^^A Tests:
%^^A \tikzscale@includetikz{filename}\\
%^^A \tikzscale@includetikz[width=1cm]{filename}\\
%^^A \tikzscale@includetikz[height=1cm]{filename}\\
%^^A \tikzscale@includetikz[height=1cm,width=1cm]{filename}\\
%^^A \tikzscale@includetikz[width=1cm,height=1cm]{filename}
%\end{macro}
%
%
%\begin{macro}{\tikzscale@includeTikzSplitArguments}
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@includeTikzSplitArguments}{m>{\SplitList=}m>{\SplitList=}g}{%
	\IfNoValueTF{#3}{%
		\tikzscale@includeTikzOneArgument#2{#1}%
	}{%
		\tikzscale@includeTikzTwoArguments#2#3{#1}%
	}%
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\tikzscale@includeTikzOneArgument}
% \cmd{\tikzscale@includeTikzOneArgument}{dimension}{length}{file name}
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@includeTikzOneArgument}{mmm}{%
%    \end{macrocode}
	% Use \cmd{\pgfmathsetmacro}, to allow calculations in the given argument.
%    \begin{macrocode}
	\pgfmathsetmacro{\tikzsize}{#2}%
	\ifstrequal{#1}{width}{%
		\tikzscale@scaleTo{\wd}{\input{#3}}{#3}%
	}{%
		\ifstrequal{#1}{height}{%
			\tikzscale@scaleTo{\ht}{\input{#3}}{#3}%
		}{%
			\tikzscale@invalidKeyError{#1}%
		}%
	}%
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\tikzscale@includeTikzOneArgument}
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@invalidKeyError}{m}{%
	\PackageError{tikzscale}{Invalid key for TikZ graphic}{Change key #1 into width or height.}%
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\tikzscale@includeTikzTwoArguments}
% \cmd{\tikzscale@includeTikzOneArgument}{firstDimension}{firstLength}{secondDimension}{secondLength}{file name}
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@includeTikzTwoArguments}{mmmmm}{%
	\ifboolexpr{test {\ifstrequal{#1}{width}} and test {\ifstrequal{#3}{height}}}{%
		\pgfmathsetmacro{\tikzscale@width}{#2}%
		\pgfmathsetmacro{\tikzscale@height}{#4}%
	}{%
		\ifboolexpr{test {\ifstrequal{#1}{height}} and test {\ifstrequal{#3}{width}}}{%
			\pgfmathsetmacro{\tikzscale@width}{#4}%
			\pgfmathsetmacro{\tikzscale@height}{#2}%
		}{%
			\tikzscale@invalidKeyError{#1 or #3}%
		}%
	}%
%    \end{macrocode}
	% The plot currently only has approximately the given width currently, due to a (known) bug in pgfplots. Thus, do a final scaling to correct the difference.
%    \begin{macrocode}
	\tikzscale@resizeTo{#5}%
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\tikzscale@scaleTo}
% \cmd{\scalteTo}{\cmd{\wd} or \cmd{\ht}}{to-be-scaled content}{file name}
% The first argument determines if a specific width or a specific height should be achieved by scaling.
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@scaleTo}{mmm}{%
%    \end{macrocode}
	% Deactivate the externalization, as the measurements to determine the correct size should not be externalized.
%    \begin{macrocode}
	\tikzscale@conditionalDisableExternalization
%    \end{macrocode}
	% When scaling a tikzpicture, only the drawings are scaled, but nodes are not scaled. So in general, there are horizontal or vertical areas, where the picture contains only unscaled nodes, and areas where the picture contains scalable drawings. Mathematically all scaled and all unscaled areas can be combined, so that there is one are area of fixed size and one variable sized area. Thus scaling only by multiplication of a factor is incorrect in general. To do the correct scaling, the fixed area size must be known. As there are two unknown parameters, i.e. fixed area size and variable area size, the fixed area size can be calculated by measuring the tikzpicture with two different scalings. A special scaling factor is used, to get the size close to the final size minimizing numerical and logical errors.
%    \begin{macrocode}
	\def\tikzscale@scale{1}%
	\tikzscale@measureSize{\measuredFirst}{#1}{#2}%
	\pgfmathsetmacro{\tikzscale@scale}{\tikzsize/\measuredFirst}%
	\tikzscale@measureSize{\measuredSecond}{#1}{#2}%
%    \end{macrocode}
	% It can happen, that there are no variable areas. Furthermore, the original size could already fit. Avoid numerical problems in both cases by directly drawing the picture. Do not compare the float values directly, as TeX's precision is quite limited.
%    \begin{macrocode}
	\pgfmathparse{abs(\measuredSecond - \tikzsize)}%
%    \end{macrocode}
	% Externalize the graphic with the final size.
%    \begin{macrocode}
	\tikzscale@conditionalEnableExternalization{#3}
	\ifdimless{\pgfmathresult pt}{0.1pt}{%
%    \end{macrocode}
	% Reusing the box' content, instead of redrawing the graphic, were probably faster, but it would bypass an externalization.
%    \begin{macrocode}
		% \usebox{\tikzscale@measuredSize}%
		#2
	}{%
%    \end{macrocode}
		% We know, that the variable sized area scales with the scaling factor, thus it holds
		% \cmd{\scale} * \cmd{\variableFirst} = \cmd{\variableSecond},
		% with \cmd{\variableFirst} = \cmd{\measuredFirst} - \cmd{\fixedSize}
		% and \cmd{\variableSecond} = \cmd{\measuredSecond} - \cmd{\fixedSize},
		% which can be solved by substituttion and results in
%    \begin{macrocode}
		\pgfmathsetmacro{\fixedSize}{(\tikzscale@scale*\measuredFirst - \measuredSecond) / (\tikzscale@scale - 1)}%
%    \end{macrocode}
		% Now, to get the correct scaling factor, only take the variable areas into account, as it holds
		% \cmd{\scaleFinal} = \cmd{\variableSizeFinal} / \cmd{\variableSizeOriginal}
		% with \cmd{\variableSizeFinal} = \cmd{\tikzsize} - \cmd{\fixedSize}
		% and \cmd{\variableSizeOriginal} = \cmd{\measuredFirst} - \cmd{\fixedSize},
		% which results in
%    \begin{macrocode}
		\pgfmathsetmacro{\tikzscale@scale}{(\tikzsize - \fixedSize) / (\measuredFirst - \fixedSize)}%
%    \end{macrocode}
		% Additionally or alternatively the brute force approach to iteratively improve the solution can be used.
	%^^A 	\foreach \l in {1,...,3}{%
	%^^A 		\begin{lrbox}{\tikzscale@measuredSize}\BODY\end{lrbox}%
	%^^A 		\pgfmathsetglobalmacro{\tikzscale@scale}{\tikzscale@scale*\tikzsize/#1\tikzscale@measuredSize}%
	%^^A 	}%
		% Finally, include the picture.
%    \begin{macrocode}
		#2%
	}%
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\tikzscale@resizeTo}
%\cmd{\tikzscale@resizeTo}{file name}
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@resizeTo}{m}{%
%    \end{macrocode}
	% Deactivate the externalization, as the measurements to determine the correct size should not be externalized.
%    \begin{macrocode}
	\tikzscale@conditionalDisableExternalization
%    \end{macrocode}
	% Using the lrbox here saves creating the content twice.
%    \begin{macrocode}
	\begin{lrbox}{\tikzscale@measuredSize}\input{#1}\end{lrbox}%
%    \end{macrocode}
	% Determine the sum of the wanted dimension and the delta (= difference between wanted dimension and measured dimension).
%    \begin{macrocode}
	\pgfmathsetmacro{\tikzscale@width}{2*\tikzscale@width-\wd\tikzscale@measuredSize}%
	\pgfmathsetmacro{\tikzscale@height}{2*\tikzscale@height-\ht\tikzscale@measuredSize}%
%    \end{macrocode}
	% Really plot the graphic with the final size.
%    \begin{macrocode}
	\tikzscale@conditionalEnableExternalization{#1}
	\input{#1}%
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\tikzscale@measuredSize}
%    \begin{macrocode}
\newsavebox{\tikzscale@measuredSize}
%    \end{macrocode}
% \cmd{\measureSize}{result variable name}{\cmd{\wd} or \cmd{\ht}}{to-be-measured content}
%    \begin{macrocode}
\def\tikzscale@measureSize#1#2#3{%
	\begin{lrbox}{\tikzscale@measuredSize}#3\end{lrbox}%
	\pgfmathsetmacro{#1}{#2\tikzscale@measuredSize}%
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\tikzscale@conditionalDisableExternalization}
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@conditionalDisableExternalization}{}{%
	\tikzexternaldisable
}
%    \end{macrocode}
%\end{macro}
%
%\begin{macro}{\tikzscale@conditionalEnableExternalization}
% Activate externalization of TikZ graphics iff it had been active before definitely disabling it for measurement purposes. The argument contains the file name.
%    \begin{macrocode}
\NewDocumentCommand{\tikzscale@conditionalEnableExternalization}{m}{%
%    \end{macrocode}
	% For the externalization, set correct file name and only externalize the graphic with the final size.
%    \begin{macrocode}
	\tikzsetnextfilename{#1}%
% 	\edef\myprefix{\pwd}
%    \end{macrocode}
	% Get the current directory as a string and use it as an prefix, so that the graphic's PDF is generated in a subdirectory if the tikz file is located in a subdirectory, too. This is necessary, as the PDF file is searched for in the subdirectory in this case. This might be unnecessary due to the newly created path lookup logic.
%    \begin{macrocode}
% 	\expandafter\tikzsetexternalprefix\expandafter{\tikzscale@pwd}%
% 	\expandnext{\tikzsetexternalprefix}{\tikzscale@pwd}%
	\tikzexternalenable
}
%    \end{macrocode}
%\end{macro}
%
% \iffalse
%</package>
% \fi
%
%\StopEventually{^^A
%  \PrintChanges
%^^A  \PrintIndex
%}
%
%\Finale